# print in the right channels (stdout and/or logfile) with the right format (flat text or colored output)
# $1 : type of tracking
# $2 : tracking string to report
function track {

	date_tag="["$(date +"%Y-%m-%d %H:%M:%S")"] "
	log_light="$2"
	log_all="${@:2}"

	screen_log=$log_light

	case $1 in
		"screen" )
	        echo -e $screen_log;
	        ;;
	    "info" )
	        echo -e "$screen_log";
	        printf "\n$date_tag%s" "$log_all" >> $log_file;
	        ;;
	   	"cool" )
	        echo -e $green"$screen_log"$std;
	        printf "\n$date_tag%s" "$log_all" >> $log_file;
	        ;;
	    "warning" )
	        echo -e $yellow"$screen_log"$std;
	        printf "\n$date_tag%s" "$log_all" >> $log_file;
	        ;;
	    "error" )
	        echo -e $red"$screen_log"$std;
	        printf "\n$date_tag%s" "$log_all" >> $log_file;
	        ;;
	esac
}

function exec_wrap {

 	if [ "$2" == "ssh" ];
        then
         ssh_prefix="$2 $3 ";
         comm="${@:4}"
     else
        ssh_prefix="";
         comm="${@:2}"
    fi

    IFSBACK=$IFS
    IFS=$'\n'
        for line in $comm
        do
            track "info" "$1" $ssh_prefix$line
            IFS=$IFSBACK
            execute $ssh_prefix$line
            IFS=$'\n'
        done
    IFS=$IFSBACK

}

# use only for launch native tasks : allow to run a whole task file in one command (easier to read )
function exec_bloc_wrap {
	track "info" "$1" "${@:2}"
 	execute "${@:2}";
}

function execute {
    # args line without first argument, first argument indicates the vhost id deploy running
    returned=$("$@" 2>&1)
    # old method when command was launched this way $("${@:2}" 2>&1) | tee -a $log_file
    #status=${PIPESTATUS[0]}
    status=$?

    if [ "$returned" != "" ] ; then
        track "warning" "return: $returned"
        if [[ "$returned" == "bash: "* ]] || [[ "$returned" == "sh: "* ]] ; then
            track "error" "Deploy failed because of bash error.";
            exit 1
        fi
    fi

    if [ "$status" -ne 0 ] ;
    then
        track "error" "Deploy failed with status $status.";
        # email sent from trap function

		if [ "$last_ssh_target" != "" ];
			then
			. $abs_path/lib/replace_vars
			track "info" "ssh $last_ssh_target:clean-on-failed" $commmand
			replace_vars $abs_path"/tasks-native/clean-on-failed"
			ssh $last_ssh_target $commmand
		fi

        exit $status
    fi

}
