# 	$id
# 	$repository
# 	$method
# 	$release_name
#	$release_path
#	$shared_path
#	${!branch}
#   ${!deploy_to}
#	${hosts[@]}
#	${tasks[@]}

# Abort on error is deffered to trap ERR caught

track "screen" "$green$counter) Project $id$std"

copy_path=$copy_dir"/"$release_name"/"${!branch}

if [ ! -f "$copy_path/$release_name.tgz" ] ;
then
	exec_wrap "$id:clone" $method " -b ${!branch}" $repository $copy_path"/"$release_name
	exec_wrap "$id:clone:clean" rm -rf $copy_path"/"$release_name"/".git
	exec_wrap "$id:compress" tar -zcf $copy_path/$release_name.tgz -C $copy_path"/" $release_name
fi

for hostid in "${hosts[@]}"
do
	host="hosts_"$hostid"_host"
	if [ "$user_vhost" != "" ]; then
		user="$user_vhost"
	else
	    user="hosts_"$hostid"_user"
	fi
	port="hosts_"$hostid"_port"
	if [ -z "${!port}" ]; then ssh_target="${!user}@${!host}"; else ssh_target="-p ${!port} ${!user}@${!host}"; fi

	track "screen" "Working on host $green"${!host}"$std"
    track "screen" $yellow"The vhost user "${!user_vhost}" override the host user $std"

	. $abs_path/lib/replace_vars

	# Get previous release path
	replace_vars $abs_path"/tasks-native/previous-release"
	retvalue=`ssh $ssh_target $commmand`
	if [ $retvalue != "" ]; then eval $retvalue; fi;

	last_ssh_target=$ssh_target
	if [ -z "${!port}" ];
		then
		replace_vars "scp $copy_path/$release_name.tgz $ssh_target:/%remote_copy_dir/";
		exec_bloc_wrap "$id:scp" $commmand
	else
		replace_vars "scp -P ${!port} $copy_path/$release_name.tgz ${!user}@${!host}:%remote_copy_dir/";
		exec_bloc_wrap "$id:scp" $commmand
	fi;

	replace_vars "ssh $ssh_target tar -zxf %remote_copy_dir/$release_name.tgz -C ${!deploy_to}/releases/";
	exec_bloc_wrap "$id:remote:untar" $commmand

	replace_vars "ssh $ssh_target rm -f %remote_copy_dir/$release_name.tgz";
	exec_bloc_wrap "$id:remote:deletetarball" $commmand

	for task in "${tasks[@]}"
	do
		if [[ $task == "tasks-common"* ]] ;
			then
			 replace_vars $abs_path"/"$task
			 exec_wrap "$id:remote:task:$task" ssh $ssh_target "$commmand"
			else
			 replace_vars $task
			 exec_wrap "$id:remote:task:$task" ssh $ssh_target "$commmand"
		fi
	done

	# publish : change current target to this fresh release
	replace_vars $abs_path"/tasks-native/current-new-release"
	exec_bloc_wrap "$id:remote:task:publish" ssh $ssh_target "$commmand"

	# keep_releases : delete too old releases
	replace_vars $abs_path"/tasks-native/keep-releases"
	exec_bloc_wrap "$id:remote:task:keep_releases" ssh $ssh_target "$commmand"

done

rm -rf $copy_path
