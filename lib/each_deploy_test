# 	$id
# 	$repository
# 	$method
# 	$release_name
#	$release_path
#	$shared_path
#	${!branch}
#   ${!deploy_to}
#	${hosts[@]}
#	${tasks[@]}
#

track "screen" "$green$counter) Project $id$std"

for hostid in "${hosts[@]}"
do
	host="hosts_"$hostid"_host"
	user="hosts_"$hostid"_user"
	port="hosts_"$hostid"_port"
	if [ -z ${!port} ]; then ssh_target="${!user}@${!host}"; else ssh_target=" -p ${!port} ${!user}@${!host}"; fi;

    last_ssh_target=$ssh_target
	track "screen" "Working on host $green"${!host}"$std"
	exec_wrap "$id:test:listremotefiles" ssh $ssh_target ls ${!deploy_to}

	. $abs_path/lib/replace_vars

	replace_vars $abs_path"/tasks-native/disk-free"
	exec_wrap "$id:test:getavailablediskspace" ssh $ssh_target "$commmand"

done

track "screen" "Testing repository access"
copy_path=$copy_dir"/"$release_name"/"${!branch}

if [ ! -f "$copy_path/$release_name.tgz" ] ; 
then
	exec_wrap "$id:clone" $method " -b ${!branch}" $repository $copy_path"/"$release_name
	exec_wrap "$id:clone:clean" rm -rf $copy_path"/"$release_name"/".git
fi

release_size=`du -sm $copy_path"/"$release_name | cut -f1`
track "screen" "Release represents "$green"$release_size Mo"$std

track "screen" $green"Ok things seem to be all right"$std