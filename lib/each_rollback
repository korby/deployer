# 	$id
# 	$repository
# 	$method
# 	$release_name
#	$release_path
#	$shared_path
#	${!branch}
#   ${!deploy_to}
#	${hosts[@]}
#	${tasks[@]}

track "screen" "$counter) Project $green$id$std"

for hostid in "${hosts[@]}"
do
	host="hosts_"$hostid"_host"
	user="hosts_"$hostid"_user"
	port="hosts_"$hostid"_port"
	if [ -z "${!port}" ]; then ssh_target="${!user}@${!host}"; else ssh_target="-p ${!port} ${!user}@${!host}"; fi

	track "screen" "Working on host $green"${!host}"$std"

	. $abs_path/lib/replace_vars

	# Get release path to activate and current active release
	replace_vars $abs_path"/tasks-native/previous-last-release"
	retvalue=`ssh $ssh_target $commmand`
	if [ "$retvalue" != "" ];
		then
			eval $retvalue;
			track "warning" "Changing current target from $last_release to $previous_last_release"
			replace_vars $abs_path"/tasks-native/current-previous-last-release"
			if [ "$simulate" == 1 ];
				then
				track "info" "SIMULATION : $id:task:rollback" $commmand
			else
				exec_wrap "$id:task:rollback" ssh $ssh_target $commmand
			fi

			track "warning" "Backup release rollbacked"
			commmand="ssh $ssh_target mv $last_release ${!deploy_to}/$last_release_name'-rollbacked'"
			if [ "$simulate" == 1 ];
				then
				track "info" "SIMULATION : $id:task:rollback:archive" $commmand
			else
				exec_wrap "$id:task:rollback:archive" $commmand
			fi

	else
		track "error" "No previous release found"
		exit 1;
	fi;


done
